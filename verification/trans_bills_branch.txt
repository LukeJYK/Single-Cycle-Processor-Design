00400020 / 20050001; 001000	00000	00101	0000000000000001 addi $5, $0, 1 
00400024 / 20060064; 001000	00000	00110	0000000001100100 addi $6, $0, 100
00400028 / 20021000; 001000	00000	00010	0001000000000000 addi $2, $0, 4096
0040002c / 00421400; 000000	00000	00010	00010	10000	000000 Sll $2, $2, 16
00400030 / 20470028; 001000	00010	00111	0000000000101000 addi $7, $2, 40
00400034 / 8c430000; 100011	00010	00011	0000000000000000 lw $3, 0($2)
00400038 / 00c3202a; 000000	00110	00011	00100	00000	101010 slt $4 $6 $3
0040003c / 10850002; 000100	00100	00101	0000000000000010 beq $4, $5, 2
00400040 / 00c33022; 000000	00110	00011	00110	00000	100010 sub $6, $6, $3
00400044 / ac400000; 101011	00010	00000	0000000000000000 sw $0 0($2)
00400048 / 20420004; 001000	00010	00010	0000000000000100 addi $2, $2, 4
0040004c / 1447fff9; 000101	00010	00111	1111111111111001 bne $2, $7, -7;
00400050 / ace60000; 101011	00111	00110	0000000000000000 sw $6, 0($7)

//memory result
# 10000000 / 00000000;
# 10000004 / 00000000;
# 10000008 / 00000000;
# 1000000c / 000002bc;
# 10000010 / 00000000;
# 10000014 / 00000000;
# 10000018 / 00000190;
# 1000001c / 00000000;
# 10000020 / 00000000;
# 10000024 / 00000000;
# 10000028 / 00000038;
R[0] = 0x00000000
R[2] = 0x10000028
R[3] = 0x00000003
R[4] = 0x00000000
R[5] = 0x00000001
R[6] = 0x00000038
R[7] = 0x10000028